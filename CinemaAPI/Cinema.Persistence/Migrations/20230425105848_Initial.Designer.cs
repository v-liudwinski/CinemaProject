// <auto-generated />
using System;
using Cinema.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cinema.Persistence.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20230425105848_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Cinema", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Cinemas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Vul. Bogdana Khmelnitskogo",
                            City = "Kiyv",
                            Email = "stupka@gmail.com",
                            Name = "Stupka",
                            PhoneNumber = "380997813842"
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Favourite", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("UserDetailsId")
                        .HasColumnType("int");

                    b.HasKey("MovieId", "UserDetailsId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("Favourites");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Science fiction"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Historical"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Crime"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Western"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Animation"
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Hall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CinemaId")
                        .HasColumnType("int");

                    b.Property<int>("HallNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CinemaId");

                    b.ToTable("Halls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CinemaId = 1,
                            HallNumber = 1
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("MovieTypeId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("nvarchar(160)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MovieTypeId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 145,
                            MovieTypeId = 1,
                            OriginalTitle = "Shrek",
                            PosterUrl = "https://i.etsystatic.com/27475238/r/il/f9eed6/3758942437/il_fullxfull.3758942437_9564.jpg",
                            ReleaseDate = new DateTime(1999, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Зелений чолов'яга"
                        },
                        new
                        {
                            Id = 2,
                            Duration = 120,
                            MovieTypeId = 2,
                            OriginalTitle = "Titanic",
                            PosterUrl = "https://i.ebayimg.com/images/g/MHIAAOSwsMhiib8p/s-l1600.jpg",
                            ReleaseDate = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Затонувший корабель"
                        },
                        new
                        {
                            Id = 3,
                            Duration = 160,
                            MovieTypeId = 3,
                            OriginalTitle = "Borat",
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BMTk0MTQ3NDQ4Ml5BMl5BanBnXkFtZTcwOTQ3OTQzMw@@._V1_.jpg",
                            ReleaseDate = new DateTime(2006, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Смішний казах"
                        },
                        new
                        {
                            Id = 4,
                            Duration = 170,
                            MovieTypeId = 1,
                            OriginalTitle = "Mask",
                            PosterUrl = "https://m.media-amazon.com/images/M/MV5BOWExYjI5MzktNTRhNi00Nzg2LThkZmQtYWVkYjRlYWI2MDQ4XkEyXkFqcGdeQXVyNTAyODkwOQ@@._V1_.jpg",
                            ReleaseDate = new DateTime(1999, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Зелений чорт"
                        },
                        new
                        {
                            Id = 5,
                            Duration = 120,
                            MovieTypeId = 2,
                            OriginalTitle = "Kung Fu Panda",
                            PosterUrl = "https://static.posters.cz/image/1300/poster/kung-fu-panda-i13408.jpg",
                            ReleaseDate = new DateTime(1995, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Чорнобілий ведмідь"
                        },
                        new
                        {
                            Id = 6,
                            Duration = 135,
                            MovieTypeId = 3,
                            OriginalTitle = "Avatar",
                            PosterUrl = "https://i.ebayimg.com/images/g/URcAAOSwC31jZQ11/s-l500.jpg",
                            ReleaseDate = new DateTime(2009, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Сині люди"
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.MovieDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AgeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("IndependentRate")
                        .HasPrecision(4, 2)
                        .HasColumnType("float(4)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("MovieTrailerUrl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Producers")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("UsersRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("MovieDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeLimit = 5,
                            Country = "USA",
                            Description = "Мирний зелений чолов'яга, намагається релаксувати в своєму болоті, але спочатку йому заважає цирк, а потім новий надокучливий друг віслюк.",
                            EndDate = new DateTime(2010, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndependentRate = 9.6999999999999993,
                            MovieId = 1,
                            MovieTrailerUrl = "www.shrekMovieTrailerUrl.com",
                            Producers = "Mr Producer",
                            StartDate = new DateTime(2000, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsersRate = 0.0
                        },
                        new
                        {
                            Id = 2,
                            AgeLimit = 16,
                            Country = "USA",
                            Description = "Чувачок потрапив на корабель, корабель затонув чувачку сподобалась дівчина, там ще була та сцена на кораблі, і потім він затонув ніби.",
                            EndDate = new DateTime(2020, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndependentRate = 9.0999999999999996,
                            MovieId = 2,
                            MovieTrailerUrl = "www.TitanicMovieTrailerUrl.com",
                            Producers = "Mr Producer",
                            StartDate = new DateTime(1995, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsersRate = 0.0
                        },
                        new
                        {
                            Id = 3,
                            AgeLimit = 20,
                            Country = "USA",
                            Description = "Борат стає інтервью'єром і напрвляється в Сполучені Штати щоб зустрітися з Памелою Андерсон, по дорозі розкидуючись смішнулічками.",
                            EndDate = new DateTime(2020, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndependentRate = 10.0,
                            MovieId = 3,
                            MovieTrailerUrl = "www.BoratMovieTrailerUrl.com",
                            Producers = "Mr Producer",
                            StartDate = new DateTime(2006, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsersRate = 0.0
                        },
                        new
                        {
                            Id = 4,
                            AgeLimit = 16,
                            Country = "USA",
                            Description = "Невдаха Джим Кері знаходить маску на березі моря і вона фіксить всі його проблеми.",
                            EndDate = new DateTime(2015, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndependentRate = 7.0999999999999996,
                            MovieId = 4,
                            MovieTrailerUrl = "www.MaskMovieTrailerUrl.com",
                            Producers = "Mr Producer",
                            StartDate = new DateTime(1999, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsersRate = 0.0
                        },
                        new
                        {
                            Id = 5,
                            AgeLimit = 3,
                            Country = "USA",
                            Description = "Божевільна стара черепаха, вибирає по приколу ведмідя-офіціанта в якості воїна ящірки, і він стає ним за 2 дня, знецінюючи працю інших.",
                            EndDate = new DateTime(2014, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndependentRate = 3.0,
                            MovieId = 5,
                            MovieTrailerUrl = "www.shrekKungFuTrailerUrl.com",
                            Producers = "Mr Producer",
                            StartDate = new DateTime(2003, 5, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsersRate = 0.0
                        },
                        new
                        {
                            Id = 6,
                            AgeLimit = 17,
                            Country = "USA",
                            Description = "Якісь сині трьох метрові створіння, шось там роблять, я не знаю бо не дивився.",
                            EndDate = new DateTime(2020, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IndependentRate = 6.0999999999999996,
                            MovieId = 6,
                            MovieTrailerUrl = "www.AvatarMovieTrailerUrl.com",
                            Producers = "Mr Producer",
                            StartDate = new DateTime(2009, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UsersRate = 0.0
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.MovieGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieGenre");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.MovieType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MovieTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MediaType = 0
                        },
                        new
                        {
                            Id = 2,
                            MediaType = 1
                        },
                        new
                        {
                            Id = 3,
                            MediaType = 2
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Price", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Cost")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.HasKey("Id");

                    b.ToTable("Prices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 100m
                        },
                        new
                        {
                            Id = 2,
                            Cost = 200m
                        },
                        new
                        {
                            Id = 3,
                            Cost = 300m
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Promocode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Promocodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "none",
                            Percentage = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stupka50",
                            Percentage = 50
                        },
                        new
                        {
                            Id = 3,
                            Name = "Stupka20",
                            Percentage = 20
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<int>("PromocodeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PromocodeId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MovieDetailsId")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasMaxLength(10)
                        .HasPrecision(2, 2)
                        .HasColumnType("float(2)");

                    b.Property<int>("UserDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieDetailsId");

                    b.HasIndex("UserDetailsId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RoleName")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RoleName = 1
                        },
                        new
                        {
                            Id = 2,
                            RoleName = 0
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Seanse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("PriceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("MovieId");

                    b.HasIndex("PriceId");

                    b.ToTable("Seanses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HallId = 1,
                            MovieId = 1,
                            PriceId = 1,
                            StartTime = new DateTime(2023, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            HallId = 1,
                            MovieId = 2,
                            PriceId = 2,
                            StartTime = new DateTime(2023, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("HallId")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.Property<int>("SeatTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HallId");

                    b.HasIndex("SeatTypeId");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HallId = 1,
                            Row = 1,
                            SeatNumber = 1,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 2,
                            HallId = 1,
                            Row = 1,
                            SeatNumber = 2,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            HallId = 1,
                            Row = 1,
                            SeatNumber = 3,
                            SeatTypeId = 4
                        },
                        new
                        {
                            Id = 4,
                            HallId = 1,
                            Row = 1,
                            SeatNumber = 4,
                            SeatTypeId = 4
                        },
                        new
                        {
                            Id = 5,
                            HallId = 1,
                            Row = 1,
                            SeatNumber = 5,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 6,
                            HallId = 1,
                            Row = 1,
                            SeatNumber = 6,
                            SeatTypeId = 2
                        },
                        new
                        {
                            Id = 7,
                            HallId = 1,
                            Row = 2,
                            SeatNumber = 1,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            HallId = 1,
                            Row = 2,
                            SeatNumber = 2,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            HallId = 1,
                            Row = 2,
                            SeatNumber = 3,
                            SeatTypeId = 4
                        },
                        new
                        {
                            Id = 10,
                            HallId = 1,
                            Row = 2,
                            SeatNumber = 4,
                            SeatTypeId = 4
                        },
                        new
                        {
                            Id = 11,
                            HallId = 1,
                            Row = 2,
                            SeatNumber = 5,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            HallId = 1,
                            Row = 2,
                            SeatNumber = 6,
                            SeatTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            HallId = 1,
                            Row = 3,
                            SeatNumber = 1,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 14,
                            HallId = 1,
                            Row = 3,
                            SeatNumber = 2,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 15,
                            HallId = 1,
                            Row = 3,
                            SeatNumber = 3,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 16,
                            HallId = 1,
                            Row = 3,
                            SeatNumber = 4,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 17,
                            HallId = 1,
                            Row = 3,
                            SeatNumber = 5,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 18,
                            HallId = 1,
                            Row = 3,
                            SeatNumber = 6,
                            SeatTypeId = 3
                        },
                        new
                        {
                            Id = 19,
                            HallId = 1,
                            Row = 3,
                            SeatNumber = 7,
                            SeatTypeId = 3
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.SeatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SeatTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Price = 10m,
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Price = 15m,
                            Type = 1
                        },
                        new
                        {
                            Id = 3,
                            Price = 25m,
                            Type = 2
                        },
                        new
                        {
                            Id = 4,
                            Price = 35m,
                            Type = 3
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Price")
                        .HasPrecision(7, 2)
                        .HasColumnType("decimal(7,2)");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<int>("SeanseId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseId");

                    b.HasIndex("SeanseId");

                    b.HasIndex("SeatId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthday = new DateTime(2000, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "admin123",
                            PhoneNumber = "380999999999",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Birthday = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@gmail.com",
                            FirstName = "User",
                            LastName = "User",
                            Password = "user123",
                            PhoneNumber = "380111111111",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            Birthday = new DateTime(2000, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zxc@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "admin123",
                            PhoneNumber = "380999999999",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 4,
                            Birthday = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "qsd@gmail.com",
                            FirstName = "User",
                            LastName = "User",
                            Password = "user123",
                            PhoneNumber = "380111111111",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 5,
                            Birthday = new DateTime(2000, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asd@gmail.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            Password = "admin123",
                            PhoneNumber = "380999999999",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 6,
                            Birthday = new DateTime(2005, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "qwe@gmail.com",
                            FirstName = "User",
                            LastName = "User",
                            Password = "user123",
                            PhoneNumber = "380111111111",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.UserDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarUrl = "",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AvatarUrl = "",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            AvatarUrl = "",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            AvatarUrl = "",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            AvatarUrl = "",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            AvatarUrl = "",
                            UserId = 6
                        });
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.UserRefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserRefreshTokens");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Favourite", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Movie", "Movie")
                        .WithMany("Favourites")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.UserDetails", "UserDetails")
                        .WithMany("Favourites")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Hall", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Cinema", null)
                        .WithMany("Halls")
                        .HasForeignKey("CinemaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Movie", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.MovieType", "MovieType")
                        .WithMany()
                        .HasForeignKey("MovieTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieType");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.MovieDetails", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Movie", "Movie")
                        .WithOne("MovieDetails")
                        .HasForeignKey("Cinema.Domain.Models.Entities.MovieDetails", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.MovieGenre", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Purchase", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Promocode", "Promocode")
                        .WithMany()
                        .HasForeignKey("PromocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.UserDetails", "UserDetails")
                        .WithMany("Purchase")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Promocode");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Review", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.MovieDetails", "MovieDetails")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.UserDetails", "UserDetails")
                        .WithMany("Reviews")
                        .HasForeignKey("UserDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MovieDetails");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Seanse", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Hall", "Hall")
                        .WithMany()
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("Movie");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Seat", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("HallId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.SeatType", "SeatType")
                        .WithMany()
                        .HasForeignKey("SeatTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("SeatType");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Ticket", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Purchase", "Purchase")
                        .WithMany("Tickets")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.Seanse", "Seanse")
                        .WithMany()
                        .HasForeignKey("SeanseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cinema.Domain.Models.Entities.Seat", "Seat")
                        .WithOne()
                        .HasForeignKey("Cinema.Domain.Models.Entities.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Purchase");

                    b.Navigation("Seanse");

                    b.Navigation("Seat");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.User", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.UserDetails", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.User", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("Cinema.Domain.Models.Entities.UserDetails", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.UserRefreshToken", b =>
                {
                    b.HasOne("Cinema.Domain.Models.Entities.User", "User")
                        .WithOne("UserRefreshToken")
                        .HasForeignKey("Cinema.Domain.Models.Entities.UserRefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Cinema", b =>
                {
                    b.Navigation("Halls");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Hall", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Movie", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("MovieDetails")
                        .IsRequired();

                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.MovieDetails", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.Purchase", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.User", b =>
                {
                    b.Navigation("UserDetails")
                        .IsRequired();

                    b.Navigation("UserRefreshToken");
                });

            modelBuilder.Entity("Cinema.Domain.Models.Entities.UserDetails", b =>
                {
                    b.Navigation("Favourites");

                    b.Navigation("Purchase");

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
